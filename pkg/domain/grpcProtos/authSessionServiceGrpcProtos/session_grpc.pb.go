// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.17.3
// source: session.proto

package authSessionServiceGrpcProtos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// AuthSessionServiceClient is the client API for AuthSessionService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type AuthSessionServiceClient interface {
	SessionExists(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Exists, error)
	CreateSessionForUser(ctx context.Context, in *UserAccountData, opts ...grpc.CallOption) (*Session, error)
	RemoveSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Nothing, error)
	GetUserInfoBySession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserInfoBySession, error)
	GetUserEmailBySession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserEmail, error)
	UpdateEmailBySession(ctx context.Context, in *UpdateEmailData, opts ...grpc.CallOption) (*Nothing, error)
}

type authSessionServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewAuthSessionServiceClient(cc grpc.ClientConnInterface) AuthSessionServiceClient {
	return &authSessionServiceClient{cc}
}

func (c *authSessionServiceClient) SessionExists(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Exists, error) {
	out := new(Exists)
	err := c.cc.Invoke(ctx, "/session.AuthSessionService/SessionExists", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) CreateSessionForUser(ctx context.Context, in *UserAccountData, opts ...grpc.CallOption) (*Session, error) {
	out := new(Session)
	err := c.cc.Invoke(ctx, "/session.AuthSessionService/CreateSessionForUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) RemoveSession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/session.AuthSessionService/RemoveSession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) GetUserInfoBySession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserInfoBySession, error) {
	out := new(UserInfoBySession)
	err := c.cc.Invoke(ctx, "/session.AuthSessionService/GetUserInfoBySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) GetUserEmailBySession(ctx context.Context, in *Session, opts ...grpc.CallOption) (*UserEmail, error) {
	out := new(UserEmail)
	err := c.cc.Invoke(ctx, "/session.AuthSessionService/GetUserEmailBySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *authSessionServiceClient) UpdateEmailBySession(ctx context.Context, in *UpdateEmailData, opts ...grpc.CallOption) (*Nothing, error) {
	out := new(Nothing)
	err := c.cc.Invoke(ctx, "/session.AuthSessionService/UpdateEmailBySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// AuthSessionServiceServer is the server API for AuthSessionService service.
// All implementations must embed UnimplementedAuthSessionServiceServer
// for forward compatibility
type AuthSessionServiceServer interface {
	SessionExists(context.Context, *Session) (*Exists, error)
	CreateSessionForUser(context.Context, *UserAccountData) (*Session, error)
	RemoveSession(context.Context, *Session) (*Nothing, error)
	GetUserInfoBySession(context.Context, *Session) (*UserInfoBySession, error)
	GetUserEmailBySession(context.Context, *Session) (*UserEmail, error)
	UpdateEmailBySession(context.Context, *UpdateEmailData) (*Nothing, error)
	mustEmbedUnimplementedAuthSessionServiceServer()
}

// UnimplementedAuthSessionServiceServer must be embedded to have forward compatible implementations.
type UnimplementedAuthSessionServiceServer struct {
}

func (UnimplementedAuthSessionServiceServer) SessionExists(context.Context, *Session) (*Exists, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SessionExists not implemented")
}
func (UnimplementedAuthSessionServiceServer) CreateSessionForUser(context.Context, *UserAccountData) (*Session, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSessionForUser not implemented")
}
func (UnimplementedAuthSessionServiceServer) RemoveSession(context.Context, *Session) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveSession not implemented")
}
func (UnimplementedAuthSessionServiceServer) GetUserInfoBySession(context.Context, *Session) (*UserInfoBySession, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserInfoBySession not implemented")
}
func (UnimplementedAuthSessionServiceServer) GetUserEmailBySession(context.Context, *Session) (*UserEmail, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserEmailBySession not implemented")
}
func (UnimplementedAuthSessionServiceServer) UpdateEmailBySession(context.Context, *UpdateEmailData) (*Nothing, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateEmailBySession not implemented")
}
func (UnimplementedAuthSessionServiceServer) mustEmbedUnimplementedAuthSessionServiceServer() {}

// UnsafeAuthSessionServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to AuthSessionServiceServer will
// result in compilation errors.
type UnsafeAuthSessionServiceServer interface {
	mustEmbedUnimplementedAuthSessionServiceServer()
}

func RegisterAuthSessionServiceServer(s grpc.ServiceRegistrar, srv AuthSessionServiceServer) {
	s.RegisterService(&AuthSessionService_ServiceDesc, srv)
}

func _AuthSessionService_SessionExists_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).SessionExists(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthSessionService/SessionExists",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).SessionExists(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_CreateSessionForUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserAccountData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).CreateSessionForUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthSessionService/CreateSessionForUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).CreateSessionForUser(ctx, req.(*UserAccountData))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_RemoveSession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).RemoveSession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthSessionService/RemoveSession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).RemoveSession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_GetUserInfoBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).GetUserInfoBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthSessionService/GetUserInfoBySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).GetUserInfoBySession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_GetUserEmailBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Session)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).GetUserEmailBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthSessionService/GetUserEmailBySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).GetUserEmailBySession(ctx, req.(*Session))
	}
	return interceptor(ctx, in, info, handler)
}

func _AuthSessionService_UpdateEmailBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateEmailData)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AuthSessionServiceServer).UpdateEmailBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/session.AuthSessionService/UpdateEmailBySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AuthSessionServiceServer).UpdateEmailBySession(ctx, req.(*UpdateEmailData))
	}
	return interceptor(ctx, in, info, handler)
}

// AuthSessionService_ServiceDesc is the grpc.ServiceDesc for AuthSessionService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var AuthSessionService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "session.AuthSessionService",
	HandlerType: (*AuthSessionServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "SessionExists",
			Handler:    _AuthSessionService_SessionExists_Handler,
		},
		{
			MethodName: "CreateSessionForUser",
			Handler:    _AuthSessionService_CreateSessionForUser_Handler,
		},
		{
			MethodName: "RemoveSession",
			Handler:    _AuthSessionService_RemoveSession_Handler,
		},
		{
			MethodName: "GetUserInfoBySession",
			Handler:    _AuthSessionService_GetUserInfoBySession_Handler,
		},
		{
			MethodName: "GetUserEmailBySession",
			Handler:    _AuthSessionService_GetUserEmailBySession_Handler,
		},
		{
			MethodName: "UpdateEmailBySession",
			Handler:    _AuthSessionService_UpdateEmailBySession_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "session.proto",
}
