# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "dev", "new_back" ]
  pull_request:
    branches: [ "dev", "new_back" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Run go vet
      run: go vet ./...

    - name: Install golint
      run: go install golang.org/x/lint/golint@latest

    - name: Run golint
      run: golint ./...
    
    - name: Build
      run: |
          go build -o ./build/ ./...
    
    - name: Generate shell scripts
      run: |
          touch ./build/runDemons.sh
          echo "
          sudo nohup ./serverRestAPI -serverRestAPI_config_file_path ../back/main.toml > back.log 2>&1 & echo $! > savepid1.txt
          sudo nohup ./userProfileService -userProfileService_config_file_path ../back/profile.toml > back2.log 2>&1 & echo $! > savepid2.txt
          sudo nohup ./authSessionService -authSessionService_config_file_path ../back/auth.toml > back3.log 2>&1 & echo $! > savepid3.txt
          " > ./build/runDemons.sh
          touch ./build/killDemons.sh
          echo "
          sudo kill -9 \`sudo lsof -t -i:8080\`
          sudo kill -9 \`sudo lsof -t -i:8082\`
          sudo kill -9 \`sudo lsof -t -i:8083\`
          sudo kill -9 \`sudo lsof -t -i:8084\`
          sudo kill -9 \`sudo lsof -t -i:8085\`
          " > ./build/killDemons.sh
    
    - name: Upload build result
      uses: actions/upload-artifact@v1
      with:
        name: build
        path: ./build
      
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3 
    
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18
      
    - name: Test
      #run: go test -race -coverpkg=./... -coverprofile=c.out `go list ./... | grep -v ".pb.go"`; go tool cover -func=c.out
      run: |
          go test -race -coverpkg=./... -coverprofile=cover.out.tmp ./...
          #cat cover.out.tmp | grep -v ./pkg/domain/grpcProtos | grep -v ./internal/authSessionService/domain | grep -v ./internal/serverRestAPI/domain | grep -v ./internal/userProfileService/domain > cover.out
          cat cover.out.tmp | grep -Ev 'pkg/domain/grpcProtos|internal/authSessionService/domain|internal/serverRestAPI/domain|internal/userProfileService/domain' > cover.out
          go tool cover -func cover.out
        
  deploy:
    #if: github.ref == 'refs/heads/master' || github.ref == 'refs/heads/main'
    runs-on: ubuntu-latest
    needs: ["build", "tests"]
    steps:
      - name: Download build
        uses: actions/download-artifact@v1
        with:
          name: build

      - name: Connect and execute commands by SSH killDemons
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SHH_PRIVATE_KEY }}
          script: |
             cd deploy_back
             ls
             ./killDemons.sh

      - name: Transfer build files to server
        uses: appleboy/scp-action@master
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SHH_PRIVATE_KEY }}
          source: "build/*"
          target: "/home/ubuntu/deploy_back"
          rm: true
          strip_components: 1
      
      - name: Connect and execute commands by SSH
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SHH_PRIVATE_KEY }}
          script: |
             cd deploy_back
             ls
             sudo chmod 775 *
             ./killDemons.sh
             ./runDemons.sh
      
        
