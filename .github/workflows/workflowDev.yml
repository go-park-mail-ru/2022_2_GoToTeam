# This workflow will build a golang project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-go

name: Go

on:
  push:
    branches: [ "dev", "new_back" ]
  pull_request:
    branches: [ "dev", "new_back" ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3

    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./...

    - name: Run go vet
      run: go vet ./...
      
  tests:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3 
    
    - name: Set up Go
      uses: actions/setup-go@v3
      with:
        go-version: 1.18

    - name: Build
      run: go build -v ./...
      
    - name: Test
      #run: go test -race -coverpkg=./... -coverprofile=c.out `go list ./... | grep -v ".pb.go"`; go tool cover -func=c.out
      run: |
          go test -race -coverpkg=./... -coverprofile=cover.out.tmp ./...
          #cat cover.out.tmp | grep -v ./pkg/domain/grpcProtos | grep -v ./internal/authSessionService/domain | grep -v ./internal/serverRestAPI/domain | grep -v ./internal/userProfileService/domain > cover.out
          cat cover.out.tmp | grep -v 'pkg/domain/grpcProtos|internal/authSessionService/domain|internal/serverRestAPI/domain|internal/userProfileService/domain' > cover.out
          go tool cover -func cover.out
        
