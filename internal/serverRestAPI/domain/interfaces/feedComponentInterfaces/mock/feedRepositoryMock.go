// Code generated by MockGen. DO NOT EDIT.
// Source: 2022_2_GoTo_team/internal/serverRestAPI/domain/interfaces/feedComponentInterfaces (interfaces: FeedRepositoryInterface)

// Package mock is a generated GoMock package.
package mock

import (
	models "2022_2_GoTo_team/internal/serverRestAPI/domain/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockFeedRepositoryInterface is a mock of FeedRepositoryInterface interface.
type MockFeedRepositoryInterface struct {
	ctrl     *gomock.Controller
	recorder *MockFeedRepositoryInterfaceMockRecorder
}

// MockFeedRepositoryInterfaceMockRecorder is the mock recorder for MockFeedRepositoryInterface.
type MockFeedRepositoryInterfaceMockRecorder struct {
	mock *MockFeedRepositoryInterface
}

// NewMockFeedRepositoryInterface creates a new mock instance.
func NewMockFeedRepositoryInterface(ctrl *gomock.Controller) *MockFeedRepositoryInterface {
	mock := &MockFeedRepositoryInterface{ctrl: ctrl}
	mock.recorder = &MockFeedRepositoryInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockFeedRepositoryInterface) EXPECT() *MockFeedRepositoryInterfaceMockRecorder {
	return m.recorder
}

// CategoryExists mocks base method.
func (m *MockFeedRepositoryInterface) CategoryExists(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CategoryExists", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CategoryExists indicates an expected call of CategoryExists.
func (mr *MockFeedRepositoryInterfaceMockRecorder) CategoryExists(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CategoryExists", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).CategoryExists), arg0, arg1)
}

// GetAllArticles mocks base method.
func (m *MockFeedRepositoryInterface) GetAllArticles(arg0 context.Context) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllArticles", arg0)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllArticles indicates an expected call of GetAllArticles.
func (mr *MockFeedRepositoryInterfaceMockRecorder) GetAllArticles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllArticles", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).GetAllArticles), arg0)
}

// GetArticles mocks base method.
func (m *MockFeedRepositoryInterface) GetArticles(arg0 context.Context) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetArticles", arg0)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetArticles indicates an expected call of GetArticles.
func (mr *MockFeedRepositoryInterfaceMockRecorder) GetArticles(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetArticles", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).GetArticles), arg0)
}

// GetFeed mocks base method.
func (m *MockFeedRepositoryInterface) GetFeed(arg0 context.Context) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeed", arg0)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeed indicates an expected call of GetFeed.
func (mr *MockFeedRepositoryInterfaceMockRecorder) GetFeed(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeed", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).GetFeed), arg0)
}

// GetFeedForCategory mocks base method.
func (m *MockFeedRepositoryInterface) GetFeedForCategory(arg0 context.Context, arg1 string) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedForCategory", arg0, arg1)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedForCategory indicates an expected call of GetFeedForCategory.
func (mr *MockFeedRepositoryInterfaceMockRecorder) GetFeedForCategory(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedForCategory", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).GetFeedForCategory), arg0, arg1)
}

// GetFeedForUserByLogin mocks base method.
func (m *MockFeedRepositoryInterface) GetFeedForUserByLogin(arg0 context.Context, arg1 string) ([]*models.Article, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetFeedForUserByLogin", arg0, arg1)
	ret0, _ := ret[0].([]*models.Article)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetFeedForUserByLogin indicates an expected call of GetFeedForUserByLogin.
func (mr *MockFeedRepositoryInterfaceMockRecorder) GetFeedForUserByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetFeedForUserByLogin", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).GetFeedForUserByLogin), arg0, arg1)
}

// UserExistsByLogin mocks base method.
func (m *MockFeedRepositoryInterface) UserExistsByLogin(arg0 context.Context, arg1 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UserExistsByLogin", arg0, arg1)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UserExistsByLogin indicates an expected call of UserExistsByLogin.
func (mr *MockFeedRepositoryInterfaceMockRecorder) UserExistsByLogin(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UserExistsByLogin", reflect.TypeOf((*MockFeedRepositoryInterface)(nil).UserExistsByLogin), arg0, arg1)
}
